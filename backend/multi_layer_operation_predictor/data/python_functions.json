{
    "addition": "def addition(a, b):\n    return a + b",
    "subtraction": "def subtraction(a, b):\n    return a - b",
    "multiplication": "def multiplication(a, b):\n    return a * b",
    "division": "def division(a, b):\n    return a / b",
    "factorial": "def factorial(n):\n    return 1 if n <= 0 else n * factorial(n - 1)",
    "square": "def square(x):\n    return x * x",
    "squareRoot": "import math\ndef square_root(x):\n    return math.sqrt(x)",
    "power": "def power(x, y):\n    return x ** y",
    "modulus": "def modulus(a, b):\n    return a % b",
    "absolute": "def absolute(x):\n    return abs(x)",
    "maximum": "def maximum(a, b):\n    return max(a, b)",
    "minimum": "def minimum(a, b):\n    return min(a, b)",
    "average": "def average(arr):\n    return sum(arr) / len(arr)",
    "sum": "def sum(arr):\n    return sum(arr)",
    "sortAscending": "def sort_ascending(arr):\n    return sorted(arr)",
    "sortDescending": "def sort_descending(arr):\n    return sorted(arr, reverse=True)",
    "reverseString": "def reverse_string(s):\n    return s[::-1]",
    "capitalize": "def capitalize(s):\n    return s.capitalize()",
    "isPalindrome": "def is_palindrome(s):\n    return s == s[::-1]",
    "fibonacci": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)",
    "gcd": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)",
    "lcm": "def lcm(a, b):\n    return (a * b) // gcd(a, b)",
    "factorize": "def factorize(n):\n    return [i for i in range(1, n + 1) if n % i == 0]",
    "isPrime": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
    "binarySearch": "def binary_search(arr, x):\n    l, h = 0, len(arr) - 1\n    while l <= h:\n        m = (l + h) // 2\n        if arr[m] == x:\n            return m\n        elif arr[m] < x:\n            l = m + 1\n        else:\n            h = m - 1\n    return -1",
    "mergeSort": "def merge_sort(arr):\n    if len(arr) < 2:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)",
    "quickSort": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    pivot = arr[0]\n    lesser = [el for el in arr[1:] if el < pivot]\n    greater = [el for el in arr[1:] if el >= pivot]\n    return quick_sort(lesser) + [pivot] + quick_sort(greater)",
    "merge": "def merge(left, right):\n    result = []\n    li, ri = 0, 0\n    while li < len(left) and ri < len(right):\n        if left[li] < right[ri]:\n            result.append(left[li])\n            li += 1\n        else:\n            result.append(right[ri])\n            ri += 1\n    return result + left[li:] + right[ri:]",
    "linearSearch": "def linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1",
    "bubbleSort": "def bubble_sort(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr) - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]",
    "factorialIterative": "def factorial_iterative(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result",
    "nthRoot": "def nth_root(x, n):\n    return x ** (1 / n)",
    "logarithm": "import math\ndef logarithm(x, base=10):\n    return math.log(x, base)",
    "exponential": "import math\ndef exponential(x):\n    return math.exp(x)",
    "sin": "import math\ndef sin(x):\n    return math.sin(x)",
    "cos": "import math\ndef cos(x):\n    return math.cos(x)",
    "tan": "import math\ndef tan(x):\n    return math.tan(x)",
    "asin": "import math\ndef asin(x):\n    return math.asin(x)",
    "acos": "import math\ndef acos(x):\n    return math.acos(x)",
    "atan": "import math\ndef atan(x):\n    return math.atan(x)",
    "randomInt": "import random\ndef random_int(min, max):\n    return random.randint(min, max)",
    "shuffleArray": "import random\ndef shuffle_array(arr):\n    random.shuffle(arr)",
    "debounce": "import time\ndef debounce(func, delay):\n    def wrapper(*args, **kwargs):\n        time.sleep(delay)\n        return func(*args, **kwargs)\n    return wrapper",
    "throttle": "import time\ndef throttle(func, limit):\n    last_time = 0\n    def wrapper(*args, **kwargs):\n        nonlocal last_time\n        current_time = time.time()\n        if current_time - last_time >= limit:\n            last_time = current_time\n            return func(*args, **kwargs)\n    return wrapper",
    "cloneDeep": "import copy\ndef clone_deep(obj):\n    return copy.deepcopy(obj)",
    "deepEqual": "def deep_equal(a, b):\n    return a == b if a == b else False",
    "flattenArray": "def flatten_array(arr):\n    return [item for sublist in arr for item in sublist]",
    "uniqueElements": "def unique_elements(arr):\n    return list(set(arr))",
    "intersection": "def intersection(arr1, arr2):\n    return list(set(arr1).intersection(arr2))"
}
